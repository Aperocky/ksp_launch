// USE THIS SCRIPT TO EXECUTE ANY NODE BURNS.

// TRIGGER CONDITION FOR FUEL OUTAGE.
// WHEN STAGE:LIQUIDFUEL < 1 THEN{
//   PRINT "STAGING.".
//   STAGE.
//   WAIT 0.
//   // DO NOT PRESERVE, ONLY ONE STAGE POSSIBLE.
// }

// INITIATE
clearscreen.
SAS OFF.
SET NODE TO NEXTNODE.
PRINT "NODE IN: " + ROUND(NODE:ETA) + " SECONDS, DELTA V " + ROUND(NODE:DELTAV:MAG) + "M/S".
SET MAX_ACC TO SHIP:MAXTHRUST/SHIP:MASS.
SET BURN_DURATION TO NODE:DELTAV:MAG/MAX_ACC.
PRINT "ESTIMATE BURN " + ROUND(BURN_DURATION) + " SECONDS.".

// WARP TO NODE
PRINT "COASTING TO MANEUVER NODE.".
WARPTO(TIME:SECONDS + NODE:ETA - BURN_DURATION/2 - 15).

// START CONFIGURING MANEUVER.
SET NODEHEADING TO NODE:DELTAV.
LOCK STEERING TO NODEHEADING.
WHEN VANG(NODEHEADING, SHIP:FACING:VECTOR) < (0.25) THEN {
  PRINT "SHIP ORIENTED.".
}
WAIT UNTIL NODE:ETA < (BURN_DURATION/2).
PRINT "START MANEUVER.".

// FIRE ENGINE.
SET POWER TO 0.
LOCK THROTTLE TO POWER.
SET DONE TO FALSE.
SET DVCURR TO NODE:DELTAV.
UNTIL DONE{
  SET MAX_ACC TO SHIP:MAXTHRUST/SHIP:MASS.
  SET POWER TO MIN(NODE:DELTAV:MAG/MAX_ACC, 1).
  SET NODEHEADING TO NODE:DELTAV.
  IF VDOT(DVCURR, NODE:DELTAV) < 0{
    PRINT "END BURN".
    LOCK THROTTLE TO 0.
    BREAK.
  }
  IF NODE:DELTAV:MAG < 0.1 {
    PRINT "END BURN".
    WAIT UNTIL VDOT(DVCURR, NODE:DELTAV) < (0.5).
    LOCK THROTTLE TO 0.
    SET DONE TO TRUE.
  }
}
UNLOCK STEERING.
UNLOCK THROTTLE.

SAS ON.
